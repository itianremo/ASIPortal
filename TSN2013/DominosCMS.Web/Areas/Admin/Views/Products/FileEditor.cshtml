@model DominosCMS.Models.ProductFile
@{
    Layout = "~/Views/Shared/_Popup.cshtml";

    var types = ViewBag.Types as IList<string>;

    var files = ViewBag.Files as IList<string>;

}
@section header {
    <style type="text/css">
        .uploadify-button {
            background-color: #FFF;
            background-image:none;
            background-position: center top;
            background-repeat: no-repeat;
            border: 1px solid #808080;
            border-radius: 0;
            color: #000;
            font: bold 11px Arial,Helvetica,sans-serif;
            text-align: center;
            text-shadow: none;
            margin-top: 5px;
            padding: 2px;
            width: 100%;
        }

        .uploadify:hover .uploadify-button {
            background-color: #FFF;
            background-image: none;
            background-position: center bottom;
        }

    </style>

    @Html.Script("jquery.validate.min.js")
    @Html.Script("jquery-ui-1.8.11.min.js")
    @Html.Script("lib/uploadfy/jquery.uploadify-3.1.min.js")

    <script type="text/javascript">
        $(function () {
            $("form").validate({
                rules: {
                    Title: "required",
                    Filename: "required",
                    Type: "required"
                }
            });

            $("#Type").change(function (data) {
                $.get("@Url.Action("GetFiles")", {type: $(this).val() }, function (data) {
                    
                    $("#Filename option").remove();
                    for (var index = 0; index < data.length; ++index) {
                        var opt = $("<option>", { text: data[index] });
                        $("#Filename").append(opt);
                    }

                    
                }, 'json');
            })

            

            $('#file_upload').uploadify({
                swf: '/_static/js/lib/uploadfy/uploadify.swf',
                uploader: '/ProductsViewer/UploadFile',
                fileTypeDesc: "PDF | DWG | BIM | DOC | ZIP | RAR | XSL | XSLT | JPG | MOV",
                fileTypeExts: "*.pdf;*.dwg;*.bim; *.doc; *.docx; *.zip; *.rar; *.xls; *.xlsx; *.jpg; *.jpeg; *.mov",
                'fileSizeLimit': '2000KB',
                height: '20',
                width: '60',
                // Your options here
                buttonText: 'Upload file',
                removeTimeout: 5,
                multi: false,
                
                onUploadStart: function (file) {
                    console.log("Upload Start");
                    $("#file_upload").uploadify("settings", "formData", { "type": 'MOV' });
                },
                onUploadSuccess: function (file, data, response) {
                    //alert('The file ' + file.path + ' was successfully uploaded with a response of ' + response + ':' + data);
                    var dataObj = jQuery.parseJSON(data);
                    //console.log($("#Type").val());
                    var opt = $("<option>", { text: dataObj.filename });
                    $("#Filename").append(opt);
                    $("#Filename").val(dataObj.filename);
                }
            });

            
        })

    </script>
}
@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)

    
    <fieldset>
        <legend>File Item</legend>
        @if (Model != null)
        {
            @: @Html.HiddenFor(model => model.ID)
            
        }    

        <div class="editor-label">
            @Html.LabelFor(model => model.Title)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Title)
            @Html.ValidationMessageFor(model => model.Title)
        </div>


        <div class="editor-label">
            @Html.LabelFor(model => model.Type)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Type, new SelectList(types)) 
            @Html.ValidationMessageFor(model => model.Type)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Filename)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Filename, new SelectList(files))
            <input type="file" name="file_upload" id="file_upload" />
        </div>
        <div class="editor-label">
            @Html.EditorFor(model => model.Visible) @Html.LabelFor(model => model.Visible)
        </div>


    </fieldset>

}